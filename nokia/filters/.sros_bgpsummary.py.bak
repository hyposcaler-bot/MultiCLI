from srlinux import data
from srlinux.data import Border, ColumnFormatter, Data, Borders, Formatter, TagValuePrinter
from srlinux.location import build_path
from srlinux.schema import FixedSchemaRoot
from srlinux.syntax import Syntax


class BgpSummaryFilter(object):

    def get_syntax(self):
        result = Syntax('summary', help='show bgp summary information for a network instance')
        return result

    def get_data_schema(self):
        '''
            Return the Schema describing the data-model of the show routine.
            Think of this as the output of 'tree' - which is the data-model of the configuration.
        '''
        root = FixedSchemaRoot()
        root.add_child(
            'bgp',
            key = 'router_id',
            fields=[
                'asn',
                'local_as',
                'admin_state',
                'oper_state']
        )

        return root

    def print(self, state, arguments, output, **_kwargs):
        bgp_summ = self._getBgpSummary_(state, arguments)
        '''print(f"arguments= {str(arguments)}")'''
        result = self._populate_data(arguments, state)
        self._set_formatters(result, state)
        output.print_data(result)

        self._getBgpNeighborList_(state, arguments)

    def _populate_data(self, arguments, state):
        result = Data(arguments.schema)
        data = result.bgp.create(self._router_id)
        data.asn = self._asn
        data.local_as = self._local_as
        data.admin_state = self._admin_state
        data.oper_state = self._oper_state
        return result

    def _getBgpSummary_(self, state, arguments):
        '''
            Retrieve the BGP information
        '''
        self._netinst = arguments.get('router','netinst')
        # define paths for BGP information
        paths = {
            'router_id': f'/network-instance[name={self._netinst}]/protocols/bgp/router-id',
            'asn': f'/network-instance[name={self._netinst}]/protocols/bgp/autonomous-system',
            'local_as': f'/network-instance[name={self._netinst}]/protocols/bgp/autonomous-system',
            'admin_state': f'/network-instance[name={self._netinst}]/protocols/bgp/admin-state',
            'oper_state': f'/network-instance[name={self._netinst}]/protocols/bgp/oper-state',
        }
        
        # builds path using paths previously defined
        built_paths = {
            'router_id': build_path(paths['router_id']),
            'asn' : build_path(paths['asn']),
            'local_as' : build_path(paths['local_as']),
            'admin_state' : build_path(paths['admin_state']),
            'oper_state' : build_path(paths['oper_state']),
        }

        # get raw data from SRLinux system
        raw_data = {
            'router_id' : state.server_data_store.get_data(built_paths['router_id'], recursive=False),
            'asn' : state.server_data_store.get_data(built_paths['asn'], recursive=False),
            'local_as' : state.server_data_store.get_data(built_paths['local_as'], recursive=False),
            'admin_state' : state.server_data_store.get_data(built_paths['admin_state'], recursive=False),
            'oper_state' : state.server_data_store.get_data(built_paths['oper_state'], recursive=False),
        }

        # get BGP attributes as Class attributes
        self._router_id = raw_data['router_id'].network_instance.get().protocols.get().bgp.get().router_id
        self._asn = raw_data['asn'].network_instance.get().protocols.get().bgp.get().autonomous_system
        self._local_as = raw_data['local_as'].network_instance.get().protocols.get().bgp.get().autonomous_system
        self._admin_state = raw_data['admin_state'].network_instance.get().protocols.get().bgp.get().admin_state
        self._oper_state = raw_data['oper_state'].network_instance.get().protocols.get().bgp.get().oper_state

    def _getBgpNeighborList_(self, state, arguments):
        '''
            Retrieve the BGP neighbor state.
        '''
        self._netinst = arguments.get('router','netinst')
        paths = {
            'neighbor': f'/network-instance[name={self._netinst}]/protocols/bgp/neighbor[peer-address=*]',
        }
        built_paths = {
            'neighbor': build_path(paths['neighbor']),
        }
        raw_data = {
            'neighbor' : state.server_data_store.get_data(built_paths['neighbor'], recursive=True),
        }

        neighbor_list = []
        for neighbor_path in raw_data['neighbor'].network_instance.get().protocols.get().bgp.get().neighbor.items():
            neighbor_list.append(neighbor_path.peer_router_id)
            print(f"DEBUG: List of Neighbor's IP addresses:\n{neighbor_list}")



        for neighbor_ip in neighbor_list:
            # define paths for BGP neighbor
            neighbor_path = build_path('/network-instance[name={name}]/protocols/bgp/neighbor[peer-address={ip}]',name=self._netinst,ip=neighbor_ip)
            neighbor_data = state.server_data_store.get_data(neighbor_path, recursive=True)
            print("DEBUG: neighbor_data :\n", neighbor_data)

            paths = {
                'ip' : f'/network-instance[name={self._netinst}]/protocols/bgp/neighbor[peer-address={neighbor_ip}]/peer-router-id',
                'asn' : f'/network-instance[name={self._netinst}]/protocols/bgp/neighbor[peer-address={neighbor_ip}]/peer-as',
                'afi_safi' : f'/network-instance[name={self._netinst}]/protocols/bgp/neighbor[peer-address={neighbor_ip}]/afi-safi[afi-safi-name=*]',
                'pkts_received' : f'/network-instance[name={self._netinst}]/protocols/bgp/neighbor[peer-address={neighbor_ip}]/received-messages/total-messages',
                'pkts_sent' : f'/network-instance[name={self._netinst}]/protocols/bgp/neighbor[peer-address={neighbor_ip}]/sent-messages/total-messages',

                # # IF /network-instance[name={name}]/protocols/bgp/neighbor[peer-address={neighbor_ip}]/session-state != "established"
                # 'uptime' : f'/network-instance[name={self._netinst}]/protocols/bgp/neighbor[peer-address={neighbor_ip}]/last-established',
                # 'routes_received' : f'/network-instance[name={self._netinst}]/protocols/bgp/neighbor[peer-address={neighbor_ip}]/afi-safi[afi-safi-name={afi_safi}]/received-routes',
                # 'routes_active' : f'/network-instance[name={self._netinst}]/protocols/bgp/neighbor[peer-address={neighbor_ip}]/afi-safi[afi-safi-name={afi_safi}]/active-routes',
                # 'routes_sent' : f'/network-instance[name={self._netinst}]/protocols/bgp/neighbor[peer-address={neighbor_ip}]/afi-safi[afi-safi-name={afi_safi}]/sent-routes',
            }
            
            # builds path using paths previously defined
            built_paths = {
                'ip' : build_path(paths['ip']),
                'asn' : build_path(paths['asn']),
                'afi_safi' : build_path(paths['afi_safi']),
                'pkts_received': build_path(paths['pkts_received']),
                'pkts_sent' : build_path(paths['pkts_sent']),

                # # IF /network-instance[name={name}]/protocols/bgp/neighbor[peer-address={neighbor_ip}]/session-state != "established"
                # 'uptime' : build_path(paths['uptime']),
                # 'routes_received' : build_path(paths['routes_received']),
                # 'routes_active' : build_path(paths['routes_active']),
                # 'routes_sent' : build_path(paths['routes_sent']),
            }

            # get raw data from SRLinux system
            raw_data = {
                'ip' : state.server_data_store.get_data(built_paths['ip'], recursive=False),
                'asn' : state.server_data_store.get_data(built_paths['asn'], recursive=False),
                'afi_safi' : state.server_data_store.get_data(built_paths['afi_safi'], recursive=False),
                'pkts_received' : state.server_data_store.get_data(built_paths['pkts_received'], recursive=False),
                'pkts_sent' : state.server_data_store.get_data(built_paths['pkts_sent'], recursive=False),
                # # IF /network-instance[name={name}]/protocols/bgp/neighbor[peer-address={neighbor_ip}]/session-state != "established"
                # 'uptime' : state.server_data_store.get_data(built_paths['uptime'], recursive=False),
                # 'routes_received' : state.server_data_store.get_data(built_paths['routes_received'], recursive=False),
                # 'routes_active' : state.server_data_store.get_data(built_paths['routes_active'], recursive=False),
                # 'routes_sent' : state.server_data_store.get_data(built_paths['routes_sent'], recursive=False),
            }

            ip = raw_data['ip'].network_instance.get().protocols.get().bgp.get().neighbor.get().peer_router_id
            asn = raw_data['asn'].network_instance.get().protocols.get().bgp.get().neighbor.get().peer_as
            afi_safi = raw_data['afi_safi'].network_instance.get().protocols.get().bgp.get().neighbor.get().afi_safi
            pkts_received = raw_data['pkts_received'].network_instance.get().protocols.get().bgp.get().neighbor.get().received_messages.get().total_messages
            pkts_sent = raw_data['pkts_sent'].network_instance.get().protocols.get().bgp.get().neighbor.get().sent_messages.get().total_messages
            # # IF /network-instance[name={name}]/protocols/bgp/neighbor[peer-address={neighbor_ip}]/session-state != "established"
            # uptime = raw_data['uptime'].network_instance.get().protocols.get().bgp.get().neighbor.get().last_established
            # routes_received = raw_data['routes_received'].network_instance.get().protocols.get().bgp.get().neighbor.get().afi_safi.get().received_routes
            # routes_active = raw_data['routes_active'].network_instance.get().protocols.get().bgp.get().neighbor.get().afi_safi.get().active_routes
            # routes_sent = raw_data['routes_sent'].network_instance.get().protocols.get().bgp.get().neighbor.get().afi_safi.get().sent_routes

            print('ip = ', ip)
            print('asn = ', asn)
            print('afi_safi = ', afi_safi)
            print('pkts received = ', pkts_received)
            print('pkts sent = ', pkts_sent)
            # # IF /network-instance[name={name}]/protocols/bgp/neighbor[peer-address={neighbor_ip}]/session-state != "established"
            # print('uptime = ', uptime)
            # print('routes received = ', routes_received)
            # print('routes active = ', routes_active)
            # print('routes sent = ', routes_sent)
            
        

    def _set_formatters(self, data, state):
        # print(f'Router ID:\t{self._router_id}')
        # print(f'ASN:\t\t{self._asn}')
        # print(f'Local AS:\t{self._local_as}')
        # print(f'Admin State:\t{self._admin_state}')
        # print(f'Oper State:\t{self._oper_state}')
        # data.set_formatter('/bgp', StatisticsFormatter_header(state))

        data.set_formatter('/bgp', ColumnFormatter(ancestor_keys=False, print_on_data=True))
        # data.set_formatter('/bgp', SrosBgp_header(data))


class SrosBgp_header():
    def __init__(self, data):
        print(f'===============================================================================')
        print(f' BGP Router ID:{data._router_id:<20} AS:{data._asn:<10} Local AS:{data._local_as:<10}')
        print(f'===============================================================================')
        print(f'BGP Admin State         : {data._admin_state:<10} BGP Oper State              : {data._oper_state:<10}')
        print(f'Total Peer Groups       : 1           Total Peers                 : 7         ')
        print(f'Total VPN Peer Groups   : 0           Total VPN Peers             : 0         ')
        print(f'Current Internal Groups : 1           Max Internal Groups         : 1         ')
        print(f'Total BGP Paths         : 52          Total Path Memory           : 20240     ')
        print(f' ')
        print(f'Total IPv4 Remote Rts   : 0           Total IPv4 Rem. Active Rts  : 0         ')
        print(f'Total IPv6 Remote Rts   : 0           Total IPv6 Rem. Active Rts  : 0         ')
        print(f'Total IPv4 Backup Rts   : 0           Total IPv6 Backup Rts       : 0         ')
        print(f'Total LblIpv4 Rem Rts   : 23          Total LblIpv4 Rem. Act Rts  : 8         ')
        print(f'Total LblIpv6 Rem Rts   : 0           Total LblIpv6 Rem. Act Rts  : 0         ')
        print(f'Total LblIpv4 Bkp Rts   : 0           Total LblIpv6 Bkp Rts       : 0         ')
        print(f'Total Supressed Rts     : 0           Total Hist. Rts             : 0         ')
        print(f'Total Decay Rts         : 0         ')
        print(f' ')
        print(f'Total VPN-IPv4 Rem. Rts : 0           Total VPN-IPv4 Rem. Act. Rts: 0         ')
        print(f'Total VPN-IPv6 Rem. Rts : 0           Total VPN-IPv6 Rem. Act. Rts: 0         ')
        print(f'Total VPN-IPv4 Bkup Rts : 0           Total VPN-IPv6 Bkup Rts     : 0         ')
        print(f'Total VPN Local Rts     : 0           Total VPN Supp. Rts         : 0         ')
        print(f'Total VPN Hist. Rts     : 0           Total VPN Decay Rts         : 0         ')
        print(f' ')
        print(f'Total MVPN-IPv4 Rem Rts : 0           Total MVPN-IPv4 Rem Act Rts : 0         ')
        print(f'Total MVPN-IPv6 Rem Rts : 0           Total MVPN-IPv6 Rem Act Rts : 0         ')
        print(f'Total MDT-SAFI Rem Rts  : 0           Total MDT-SAFI Rem Act Rts  : 0         ')
        print(f'Total McIPv4 Remote Rts : 0           Total McIPv4 Rem. Active Rts: 0         ')
        print(f'Total McIPv6 Remote Rts : 0           Total McIPv6 Rem. Active Rts: 0         ')
        print(f'Total McVpnIPv4 Rem Rts : 0           Total McVpnIPv4 Rem Act Rts : 0         ')
        print(f'Total McVpnIPv6 Rem Rts : 0           Total McVpnIPv6 Rem Act Rts : 0         ')
        print(f' ')
        print(f'Total EVPN Rem Rts      : 11          Total EVPN Rem Act Rts      : 0         ')
        print(f'Total L2-VPN Rem. Rts   : 0           Total L2VPN Rem. Act. Rts   : 0         ')
        print(f'Total MSPW Rem Rts      : 0           Total MSPW Rem Act Rts      : 0         ')
        print(f'Total RouteTgt Rem Rts  : 0           Total RouteTgt Rem Act Rts  : 0         ')
        print(f'Total FlowIpv4 Rem Rts  : 0           Total FlowIpv4 Rem Act Rts  : 0         ')
        print(f'Total FlowIpv6 Rem Rts  : 0           Total FlowIpv6 Rem Act Rts  : 0         ')
        print(f'Total FlowVpnv4 Rem Rts : 0           Total FlowVpnv4 Rem Act Rts : 0         ')
        print(f'Total FlowVpnv6 Rem Rts : 0           Total FlowVpnv6 Rem Act Rts : 0         ')
        print(f'Total Link State Rem Rts: 0           Total Link State Rem Act Rts: 0         ')
        print(f'Total SrPlcyIpv4 Rem Rts: 0           Total SrPlcyIpv4 Rem Act Rts: 0         ')
        print(f'Total SrPlcyIpv6 Rem Rts: 0           Total SrPlcyIpv6 Rem Act Rts: 0         ')
        print(f' ')
        print(f'===============================================================================')
